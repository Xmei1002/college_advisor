"""增加学生志愿相关表

Revision ID: bd60d6ce04db
Revises: 79404cb7121b
Create Date: 2025-04-02 10:41:23.214080

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'bd60d6ce04db'
down_revision = '79404cb7121b'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('student_volunteer_plans',
    sa.Column('student_id', sa.Integer(), nullable=False, comment='学生ID'),
    sa.Column('planner_id', sa.Integer(), nullable=False, comment='规划师ID'),
    sa.Column('version', sa.Integer(), nullable=False, comment='版本号'),
    sa.Column('is_current', sa.Boolean(), nullable=False, comment='是否当前版本'),
    sa.Column('remarks', sa.String(length=500), nullable=True, comment='备注说明'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['planner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('student_volunteer_plans', schema=None) as batch_op:
        batch_op.create_index('idx_student_current', ['student_id', 'is_current'], unique=False)
        batch_op.create_index('idx_student_version', ['student_id', 'version'], unique=False)

    op.create_table('volunteer_colleges',
    sa.Column('plan_id', sa.Integer(), nullable=False, comment='志愿方案ID'),
    sa.Column('category_id', sa.Integer(), nullable=False, comment='类别ID(1:冲, 2:稳, 3:保)'),
    sa.Column('group_id', sa.Integer(), nullable=False, comment='志愿段ID(1-12)'),
    sa.Column('volunteer_index', sa.Integer(), nullable=False, comment='志愿在方案中的序号(1-48)'),
    sa.Column('college_id', sa.Integer(), nullable=False, comment='院校ID'),
    sa.Column('college_name', sa.String(length=100), nullable=False, comment='院校名称'),
    sa.Column('college_group_id', sa.Integer(), nullable=False, comment='院校专业组ID'),
    sa.Column('score_diff', sa.Integer(), nullable=True, comment='分差'),
    sa.Column('prediction_score', sa.Integer(), nullable=True, comment='预测分数'),
    sa.Column('recommend_type', sa.String(length=20), nullable=False, comment='推荐类型(ai/planner)'),
    sa.Column('ai_analysis', sa.Text(), nullable=True, comment='AI解析结果，包含推荐理由等信息'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['student_volunteer_plans.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('plan_id', 'volunteer_index', name='unique_volunteer_index')
    )
    with op.batch_alter_table('volunteer_colleges', schema=None) as batch_op:
        batch_op.create_index('idx_category_group', ['plan_id', 'category_id', 'group_id'], unique=False)
        batch_op.create_index('idx_plan', ['plan_id'], unique=False)

    op.create_table('volunteer_specialties',
    sa.Column('volunteer_college_id', sa.Integer(), nullable=False, comment='志愿ID'),
    sa.Column('specialty_id', sa.Integer(), nullable=False, comment='专业ID'),
    sa.Column('specialty_code', sa.String(length=50), nullable=True, comment='专业代码'),
    sa.Column('specialty_name', sa.String(length=100), nullable=False, comment='专业名称'),
    sa.Column('specialty_index', sa.Integer(), nullable=False, comment='专业在志愿中的排序(1-6)'),
    sa.Column('prediction_score', sa.Integer(), nullable=True, comment='专业预测分数'),
    sa.Column('plan_number', sa.Integer(), nullable=True, comment='计划招生人数'),
    sa.Column('tuition', sa.Integer(), nullable=True, comment='学费'),
    sa.Column('remarks', sa.String(length=500), nullable=True, comment='专业备注'),
    sa.Column('ai_analysis', sa.Text(), nullable=True, comment='AI对该专业的解析结果，包含适配度分析等信息'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['volunteer_college_id'], ['volunteer_colleges.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('volunteer_college_id', 'specialty_index', name='unique_specialty_index')
    )
    with op.batch_alter_table('volunteer_specialties', schema=None) as batch_op:
        batch_op.create_index('idx_volunteer', ['volunteer_college_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('volunteer_specialties', schema=None) as batch_op:
        batch_op.drop_index('idx_volunteer')

    op.drop_table('volunteer_specialties')
    with op.batch_alter_table('volunteer_colleges', schema=None) as batch_op:
        batch_op.drop_index('idx_plan')
        batch_op.drop_index('idx_category_group')

    op.drop_table('volunteer_colleges')
    with op.batch_alter_table('student_volunteer_plans', schema=None) as batch_op:
        batch_op.drop_index('idx_student_version')
        batch_op.drop_index('idx_student_current')

    op.drop_table('student_volunteer_plans')
    # ### end Alembic commands ###
